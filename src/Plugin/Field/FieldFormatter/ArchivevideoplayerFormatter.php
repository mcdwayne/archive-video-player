<?php

namespace Drupal\archive_video_player\Plugin\Field\FieldFormatter;

use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\FormatterBase;
use Drupal\Core\Form\FormStateInterface;

/**
 * Plugin implementation of the 'ArchiveVideoPLayer' formatter.
 *
 * @FieldFormatter(
 *   id = "archive_video_player_archivevideoplayer",
 *   label = @Translation("ArchiveVideoPLayer"),
 *   field_types = {
 *     "string"
 *   }
 * )
 */
class ArchivevideoplayerFormatter extends FormatterBase {


  /**
 * Everything above this line was generated using Drush 9's generate:
 * drush generate plugin-filed-formatter 
 */


  /**
   * defaultSettings sets the values to be something not null. 
   * This is mandatory for the 'Manage display' settings to work.  
   * 
   * Returns the array of values where the key is the names are the variables (not the content of the item, where we are getting the video ID from) defined in .twig and .module files.  
   * 
   * The settings will not save without this function present.
   * 
   * The code scaffolding was automatically generated by Drush 9's generate command
   * 
   * {@inheritdoc}
   */
  public static function defaultSettings() {
    return [
      'videoheight' => '560',
      'videowidth' => '480',
      'autoplayon' => '0',
    ] + parent::defaultSettings();
  }

  /**
   * This is the form you see when you click the little gear wheel on the right hand side of the `ArchiveVideoForm` field, once enabled and used to format a text field. 
   * 
   * Since we are returning an array, we need to supply our variable names defined in the .twig and .module files, as well as the mandatory defualtSettings function.  
   * 
   * I used text for height and width, and checkbox, which is 0 when unchecked and 1 when checked.  
   * 
   * I am also going to grab the current settings to auto-fill the fields by using the function $this->getSetting, which lets me reference our variables.
   * 
   * The code scaffolding was automatically generated by Drush 9's generate command
   * 
   * {@inheritdoc}
   */
  public function settingsForm(array $form, FormStateInterface $form_state) {

    $elements['videoheight'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Video Height'),
      '#default_value' => $this->getSetting('videoheight'),
    ];
    $elements['videowidth'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Video Width'),
      '#default_value' => $this->getSetting('videowidth'),
    ];
    $elements['autoplayon'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('Autoplay On?'),
      '#default_value' => $this->getSetting('autoplayon'),
    ];

    return $elements;
  }

  /**
   * This is the display on the right hand side of the ArchiveVideoPLayer when that form section is closed, to the left of the gear wheel. It informs us of status without needing to open the menu.  
   * 
   * Here we use $this-getSettings to reference our variables and append some text to display to the user.  
   * 
   * Unlike defaultSettings() this one is not mandatory, but it makes life as an admin a little nicer to have it.  
   * 
   * The code scaffolding was automatically generated by Drush 9's generate command
   * 
   * {@inheritdoc}
   */
  public function settingsSummary() {
    $summary = [
      'title' => $this->t('Video Settings'),
      'height' => $this->t('Height: ').$this->getSetting('videoheight'),
      'width' => $this->t('Width: ').$this->getSetting('videowidth'),
      'autoplayon' => $this->t('Autoplay On: ').$this->getSetting('autoplayon'),
    ];
    return $summary;
  }

  /**
   * viewElements can work on it's own. Not every module needs 'Manage display' settings for every field, but many will.  
   * 
   * Here we are passing back to our field modification instructions of which theme to pick up, the value of the video id field, and our variables.  Once again I am using $this-getSettings to get our variables. 
   * 
   * The code scaffolding was automatically generated by Drush 9's generate command
   * 
   * {@inheritdoc}
   */
  public function viewElements(FieldItemListInterface $items, $langcode) {
    $element = [];

    foreach ($items as $delta => $item) {
      $element[$delta] = [
        '#theme' => 'archive_video_player',
        '#archive_id' => $item->value,
        '#videoheight' => $this->getSetting('videoheight'),
        '#videowidth' => $this->getSetting('videowidth'),
        '#autoplayon' => $this->getSetting('autoplayon'),

      ];
    }

    return $element;
  }

}
